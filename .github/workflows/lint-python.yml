name: Python linting
on:
  workflow_call:
    inputs:
      black:
        default: false
        description: Run black
        required: false
        type: boolean
      flake8:
        default: false
        description: Run flake8
        required: false
        type: boolean
      isort:
        default: false
        description: Run isort
        required: false
        type: boolean
      mypy:
        default: false
        description: Run mypy
        required: false
        type: boolean

      package-manager:
        default: pip
        description: Package manager to use (pip or pipenv)
        required: false
        type: string
      python-version:
        default: "3.10"
        required: false
        type: string
      requirements-files:
        default: requirements.txt
        description: Space-separated list of requirements files if using pip
        required: false
        type: string
      system-dependencies:
        default: ""
        description: Space-separated ist of system dependencies for mypy
        required: false
        type: string

jobs:
  python-dependencies:
    # Having this as a separate step allows both isort and mypy to use this cache,
    # reducing overall build time.
    if: inputs.isort || inputs.mypy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
        with:
          cache: ${{ inputs.package-manager }}
          python-version: ${{ inputs.python-version }}
      - name: Install pipenv requirements
        if: inputs.package-manager == 'pipenv'
        run: pip install pipenv && pipenv install --dev
      - name: Install pip requirements
        if: inputs.package-manager == 'pip'
        run: pip install -r ${{ inputs.requirements-files }}

  black:
    if: inputs.black
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: psf/black@stable

  flake8:
    if: inputs.flake8
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
        with:
          python-version: ${{ inputs.python-version }}
      - name: Install flake8
        run: python -m pip install flake8
      - name: Run flake8
        uses: liskin/gh-problem-matcher-wrap@v1
        with:
          linters: flake8
          run: python -m flake8

  isort:
    if: inputs.isort
    needs: [python-dependencies]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
        with:
          cache: ${{ inputs.package-manager }}
          python-version: ${{ inputs.python-version }}
      # Make sure there is some version of isort in case it's not a listed dependency.
      - name: Install isort
        run: pip install isort
      - name: Install pipenv requirements
        if: inputs.package-manager == 'pipenv'
        run: pip install pipenv && pipenv install --dev
      - name: Run isort (pip)
        if: inputs.package-manager == 'pip'
        run: python -m isort --check-only --diff .
      - name: Run isort (pipenv)
        if: inputs.package-manager == 'pipenv'
        run: pipenv run isort --check-only --diff .

  mypy:
    if: inputs.mypy
    needs: [python-dependencies]
    runs-on: ubuntu-latest
    steps:
      - name: Install system dependencies
        if: inputs.system-dependencies != ''
        run: |
          apt-get update -y
          apt-get install -y --no-install-recommends ${{ inputs.system-dependencies }}
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
        with:
          cache: ${{ inputs.package-manager }}
          python-version: ${{ inputs.python-version }}
      # Make sure there is some version of mypy in case it's not a listed dependency.
      - name: Install mypy
        run: pip install mypy
      - name: Install pipenv requirements
        if: inputs.package-manager == 'pipenv'
        run: pip install pipenv && pipenv install --dev
      - name: Install pip requirements
        if: inputs.package-manager == 'pip'
        run: pip install -r ${{ inputs.requirements-files }}
      - name: Load mypy cache
        id: mypy-cache
        uses: actions/cache@v2
        with:
          path: .mypy_cache
          key: mypy-${{ runner.os }}
      - name: Run mypy (pip)
        if: inputs.package-manager == 'pip'
        run: python -m mypy --show-column-numbers
      - name: Run mypy (pipenv)
        if: inputs.package-manager == 'pipenv'
        run: pipenv run mypy --show-column-numbers
